name: Build and Deploy Backend to Develop Testing

on:
  pull_request:
  workflow_dispatch:

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL 17 client tools
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

      - name: Clean test database
        run: |
          PGPASSWORD="${{ secrets.TEST_DB_PASSWORD }}" psql -h "${{ secrets.STAGING_VM_IP }}" -U "${{ secrets.TEST_DB_USER }}" -d "${{ secrets.TEST_DB_NAME }}" -p "${{ secrets.TEST_DB_PORT }}" -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" > /dev/null 2>&1

      - name: Copy data from staging database to test database
        env:
          PGPASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
        run: |
          pg_dump -h "${{ secrets.STAGING_DB_HOST }}" -p "${{ secrets.STAGING_DB_PORT }}" -U "${{ secrets.STAGING_DB_USER }}" "${{ secrets.STAGING_DB_NAME }}" > staging_dump.sql
          
          PGPASSWORD="${{ secrets.TEST_DB_PASSWORD }}" psql -h "${{ secrets.TEST_DB_HOST }}" -p "${{ secrets.TEST_DB_PORT }}" -U "${{ secrets.TEST_DB_USER }}" "${{ secrets.TEST_DB_NAME }}" < staging_dump.sql > /dev/null 2>&1

  migrate:
    needs: setup-environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Download and run Flyway migrations
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.17.0/flyway-commandline-10.17.0-linux-x64.tar.gz | tar xvz
          ./flyway-10.17.0/flyway -url="jdbc:postgresql://${{ secrets.TEST_DB_HOST }}:${{ secrets.TEST_DB_PORT }}/${{ secrets.TEST_DB_NAME }}" \
            -user="${{ secrets.TEST_DB_USER }}" \
            -password="${{ secrets.TEST_DB_PASSWORD }}" \
            -locations="filesystem:src/main/resources/db/migration" \
            migrate

  build-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Clean old code on VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_VM_IP }}
          username: ${{ secrets.STAGING_VM_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            rm -rf ~/polymorphia

      - name: Clone repository to VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_VM_IP }}
          username: ${{ secrets.STAGING_VM_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            git clone --depth 1 --branch "${{ github.head_ref }}" https://github.com/${{ github.repository }}.git ~/polymorphia

      - name: Clean Docker resources
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_VM_IP }}
          username: ${{ secrets.STAGING_VM_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            docker image prune -a --force --filter "until=168h" || true
            docker container prune -f

      - name: Build Docker image
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_VM_IP }}
          username: ${{ secrets.STAGING_VM_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd ~/polymorphia/polymorphia-backend
            docker build -t polymorphia-backend:test-latest -f Dockerfile .

  test-backend:
    needs: migrate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up application.properties
        run: |
          mkdir -p ./polymorphia-backend/src/main/resources
          printf "%s" "${{ secrets.APPLICATION_PROPERTIES_TEST }}" > ./polymorphia-backend/src/main/resources/application.properties

      - name: Run tests with Maven
        working-directory: ./polymorphia-backend
        run: |
          mvn test -Dspring.profiles.active=test

  run-backend: 
    needs: test-backend
    runs-on: ubuntu-latest

    steps:
      - name: Run backend on VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_VM_IP }}
          username: ${{ secrets.STAGING_VM_USER }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            docker stop polymorphia-backend || true
            docker rm polymorphia-backend || true
            docker run -d --name polymorphia-backend -p 8080:8080 \
              -v /app/config:/app/config \
              -v ~/polymorphia-static:/app/static \
              polymorphia-backend:test-latest \
              --spring.config.location=file:/app/config/application-dev.properties